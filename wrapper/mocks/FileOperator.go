// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	fs "io/fs"
	os "os"

	mock "github.com/stretchr/testify/mock"
)

// FileOperator is an autogenerated mock type for the FileOperator type
type FileOperator struct {
	mock.Mock
}

// CloseFile provides a mock function with given fields: file
func (_m *FileOperator) CloseFile(file *os.File) error {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for CloseFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*os.File) error); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFile provides a mock function with given fields: fileName
func (_m *FileOperator) DeleteFile(fileName string) error {
	ret := _m.Called(fileName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(fileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenFile provides a mock function with given fields: name, flag, perm
func (_m *FileOperator) OpenFile(name string, flag int, perm fs.FileMode) (*os.File, error) {
	ret := _m.Called(name, flag, perm)

	if len(ret) == 0 {
		panic("no return value specified for OpenFile")
	}

	var r0 *os.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, fs.FileMode) (*os.File, error)); ok {
		return rf(name, flag, perm)
	}
	if rf, ok := ret.Get(0).(func(string, int, fs.FileMode) *os.File); ok {
		r0 = rf(name, flag, perm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, fs.FileMode) error); ok {
		r1 = rf(name, flag, perm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stat provides a mock function with given fields: name
func (_m *FileOperator) Stat(name string) (fs.FileInfo, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (fs.FileInfo, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) fs.FileInfo); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteString provides a mock function with given fields: file, s
func (_m *FileOperator) WriteString(file *os.File, s string) (int, error) {
	ret := _m.Called(file, s)

	if len(ret) == 0 {
		panic("no return value specified for WriteString")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*os.File, string) (int, error)); ok {
		return rf(file, s)
	}
	if rf, ok := ret.Get(0).(func(*os.File, string) int); ok {
		r0 = rf(file, s)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*os.File, string) error); ok {
		r1 = rf(file, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFileOperator creates a new instance of FileOperator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileOperator(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileOperator {
	mock := &FileOperator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
